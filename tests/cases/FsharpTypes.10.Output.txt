namespace Domain
open Protokeep.FsharpTypes
type Triple = {
    Comment1 : string
    Comment2 : string
    Comment3 : string
}
with
    member x.ItemValues () =
        [| x.Comment1; x.Comment2; x.Comment3 |]
    member x.ItemIndexes () =
        [| Key.Value "1"; Key.Value "2"; Key.Value "3" |]
    member x.Item = function
        | Key.Value "1" -> Some x.Comment1
        | Key.Value "2" -> Some x.Comment2
        | Key.Value "3" -> Some x.Comment3
        | _ -> None
    member x.WithItems (items:Map<Key,_>) =
        {x with
            Comment1 = items.TryFind(Key.Value "1") |> Option.defaultValue x.Comment1
            Comment2 = items.TryFind(Key.Value "2") |> Option.defaultValue x.Comment2
            Comment3 = items.TryFind(Key.Value "3") |> Option.defaultValue x.Comment3
        }
type Score = {
    S1 : int
    S2 : int
}
with
    static member MakeKey (s1': int, s2': int) =
        Key.Items [Key.Value (s1'.ToString()); Key.Value (s2'.ToString())]
    interface IEntity with
        member x.Key = Score.MakeKey (x.S1, x.S2)
type ScoreOutcome = {
    Score : Score
    Comment : string
}
type CorrectScore = {
    Scores : ScoreOutcome list
}
with
    member x.ItemValues () =
        [| yield! x.Scores |> Seq.map (fun v -> v.Comment) |]
    member x.ItemIndexes () =
        [| yield! x.Scores |> Seq.map (fun v -> v.Score.Key) |]
    member x.TryFindItemInScores (key:Key) =
        x.Scores |> Seq.tryFind (fun i -> i.Score.Key = key)
    member x.Item = function
        | TryFind x.TryFindItemInScores v -> Some v.Comment
        | _ -> None
    member x.WithItems (items:Map<Key,_>) =
        {x with
            Scores = x.Scores |> List.map (fun v -> items.TryFind v.Score.Key |> Option.map (fun i -> {v with Comment = i}) |> Option.defaultValue v)
        }
type Market =
    | Unknown
    | Triple of p1:Triple
    | Multiple of p1:CorrectScore
with
    static member MakeUnknownKey () = Key.Value "0"
    static member MakeTripleKey () = Key.Value "1"
    static member MakeMultipleKey () = Key.Value "2"
    interface IEntity with
        member x.Key =
            match x with
            | Market.Unknown -> Market.MakeUnknownKey ()
            | Market.Triple (p1') -> Market.MakeTripleKey ()
            | Market.Multiple (p1') -> Market.MakeMultipleKey ()
    member x.ItemValues () =
        match x with
        | Market.Unknown -> Array.empty
        | Market.Triple (p1') -> p1'.ItemValues()
        | Market.Multiple (p1') -> p1'.ItemValues()
    member x.ItemIndexes () =
        match x with
        | Market.Unknown -> Array.empty
        | Market.Triple (p1') -> p1'.ItemIndexes()
        | Market.Multiple (p1') -> p1'.ItemIndexes()
    member x.Item (key: Key) =
        match x with
        | Market.Unknown -> None
        | Market.Triple (p1') -> p1'.Item key
        | Market.Multiple (p1') -> p1'.Item key
    member x.WithItems (items: Map<Key,_>) =
        match x with
        | Market.Unknown -> x
        | Market.Triple (p1') -> Market.Triple (p1'.WithItems items)
        | Market.Multiple (p1') -> Market.Multiple (p1'.WithItems items)
