namespace Tests.FsharpFable
open Fable.SimpleJson
open Protokeep.FsharpFable
type ConvertDomain () =
    static member DefaultTrafficLight =
        lazy Domain.TrafficLight.Unknown
    static member TrafficLightFromString = function
        | "TrafficLightRed" -> Domain.TrafficLight.Red
        | "TrafficLightYellow" -> Domain.TrafficLight.Yellow
        | "TrafficLightGreen" -> Domain.TrafficLight.Green
        | _ -> Domain.TrafficLight.Unknown
    static member TrafficLightToString = function
        | Domain.TrafficLight.Red -> "TrafficLightRed"
        | Domain.TrafficLight.Yellow -> "TrafficLightYellow"
        | Domain.TrafficLight.Green -> "TrafficLightGreen"
        | _ -> "Unknown"
    static member LightStatusFromJson (json: Json): Domain.LightStatus =
        let mutable y = Domain.LightStatus.Unknown
        getProps json
        |> Seq.iter(fun pair ->
            match pair.Key with
            | "Normal" -> pair.Value |> ifBool (fun v -> y <- Domain.LightStatus.Normal)
            | "Warning" -> pair.Value |> ifNumber (fun v -> y <- v |> unbox |> Domain.LightStatus.Warning)
            | "OutOfOrder" -> pair.Value |> (fun v -> y <- v |> ConvertDomain.LightStatusCaseOutOfOrderFromJson)
            | _ -> () )
        y
    static member LightStatusToJson (x:Domain.LightStatus) =
        match x with
        | Domain.LightStatus.Normal -> "Normal", JBool (true)
        | Domain.LightStatus.Warning (errorsCount) -> "Warning", JNumber (unbox errorsCount)
        | Domain.LightStatus.OutOfOrder (since,period) -> "OutOfOrder", ConvertDomain.LightStatusCaseOutOfOrderToJson (since,period)
        | _ -> "Unknown", JBool (true)
        |> List.singleton |> Map.ofList |> JObject
    static member LightStatusCaseOutOfOrderFromJson (json: Json) =
        let mutable since = System.DateTime.MinValue
        let mutable period = System.TimeSpan.Zero
        getProps json
        |> Seq.iter(fun pair ->
            match pair.Key with
            | "Since" -> pair.Value |> ifString (fun v -> since <- v |> toDateTime)
            | "Period" -> pair.Value |> ifString (fun v -> period <- v |> toTimeSpan)
            | _ -> () )
        Domain.LightStatus.OutOfOrder (since,period)
    static member LightStatusCaseOutOfOrderToJson (since,period) =
        [
           "Since", JString (since |> fromDateTime)
           "Period", JString (period |> fromTimeSpan)
        ] |> Map.ofList |> JObject
    static member DefaultCrossroad: Lazy<Domain.Crossroad> =
        lazy {
            Id = 0
            Street1 = ""
            Street2 = ""
            Light = ConvertDomain.DefaultTrafficLight.Value
            LightStatus = Domain.LightStatus.Unknown
        }
    static member CrossroadFromJson (json: Json): Domain.Crossroad =
        let mutable vId = 0
        let mutable vStreet1 = ""
        let mutable vStreet2 = ""
        let mutable vLight = ConvertDomain.DefaultTrafficLight.Value
        let mutable vLightStatus = Domain.LightStatus.Unknown
        getProps json
        |> Seq.iter(fun pair ->
            match pair.Key with
            | "Id" -> pair.Value |> ifNumber (fun v -> vId <- v |> unbox)
            | "Street1" -> pair.Value |> ifString (fun v -> vStreet1 <- v)
            | "Street2" -> pair.Value |> ifString (fun v -> vStreet2 <- v)
            | "Light" -> pair.Value |> ifString (fun v -> vLight <- v |> ConvertDomain.TrafficLightFromString)
            | "LightStatus" -> pair.Value |> (fun v -> vLightStatus <- v |> ConvertDomain.LightStatusFromJson)
            | _ -> () )
        {
            Id = vId
            Street1 = vStreet1
            Street2 = vStreet2
            Light = vLight
            LightStatus = vLightStatus
        }
    static member CrossroadToJson (x: Domain.Crossroad) =
        [
           "Id", JNumber (unbox x.Id)
           "Street1", JString (x.Street1)
           "Street2", JString (x.Street2)
           "Light", JString (x.Light |> ConvertDomain.TrafficLightToString)
           "LightStatus", (x.LightStatus |> ConvertDomain.LightStatusToJson)
        ] |> Map.ofList |> JObject
